name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Backend TypeScript compilation and linting
  backend-build:
    name: Web UI Backend - Build & Type Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-backend-${{ hashFiles('services/web-ui/backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-backend-
            ${{ runner.os }}-npm-

      - name: Install dependencies
        working-directory: services/web-ui/backend
        run: npm ci

      - name: TypeScript type check
        working-directory: services/web-ui/backend
        run: npx tsc --noEmit

      - name: Build
        working-directory: services/web-ui/backend
        run: npm run build

  # Frontend TypeScript compilation and build
  frontend-build:
    name: Web UI Frontend - Build & Type Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-frontend-${{ hashFiles('services/web-ui/frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-frontend-
            ${{ runner.os }}-npm-

      - name: Install dependencies
        working-directory: services/web-ui/frontend
        run: |
          npm ci
          npm install --force @rollup/rollup-linux-x64-gnu
          npm rebuild rollup

      - name: TypeScript type check
        working-directory: services/web-ui/frontend
        run: npx tsc --noEmit

      - name: Build
        working-directory: services/web-ui/frontend
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: services/web-ui/frontend/dist/
          retention-days: 7

  # Prompt Guard API - Python validation
  prompt-guard-api:
    name: Prompt Guard API - Validation
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: prompt-guard-api/requirements.txt

      - name: Install dependencies
        working-directory: prompt-guard-api
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Syntax check
        working-directory: prompt-guard-api
        run: python -m py_compile app.py

  # Docker build validation
  docker-build:
    name: Docker - Build & Smoke Test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        service:
          - web-ui-backend
          - web-ui-frontend
          - prompt-guard-api

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Web UI Backend
        if: matrix.service == 'web-ui-backend'
        working-directory: services/web-ui/backend
        run: docker build -t vigil-guard-web-ui-backend:test .

      - name: Build Web UI Frontend
        if: matrix.service == 'web-ui-frontend'
        run: docker build -f services/web-ui/frontend/Dockerfile -t vigil-guard-web-ui-frontend:test .

      - name: Build Prompt Guard API
        if: matrix.service == 'prompt-guard-api'
        working-directory: prompt-guard-api
        run: docker build -t vigil-guard-prompt-guard-api:test .

      - name: Smoke test - Start container
        run: |
          case "${{ matrix.service }}" in
            web-ui-backend)
              docker run -d --name test-container -p 8787:8787 \
                -e NODE_ENV=test \
                -e TARGET_DIR=/tmp/test \
                vigil-guard-web-ui-backend:test
              sleep 5
              docker logs test-container
              ;;
            web-ui-frontend)
              docker run -d --name test-container -p 5173:80 \
                vigil-guard-web-ui-frontend:test
              sleep 3
              docker logs test-container
              ;;
            prompt-guard-api)
              docker run -d --name test-container -p 8000:8000 \
                -e MOCK_MODEL=true \
                vigil-guard-prompt-guard-api:test
              sleep 5
              docker logs test-container
              ;;
          esac

      - name: Smoke test - Health check
        run: |
          case "${{ matrix.service }}" in
            web-ui-backend)
              curl -f http://localhost:8787/health || exit 1
              ;;
            web-ui-frontend)
              curl -f http://localhost:5173/ || exit 1
              ;;
            prompt-guard-api)
              curl -f http://localhost:8000/health || exit 1
              curl -f http://localhost:8000/ || exit 1
              # Test mock detection endpoint
              curl -f -X POST http://localhost:8000/detect \
                -H "Content-Type: application/json" \
                -d '{"text": "Hello world"}' || exit 1
              ;;
          esac

      - name: Cleanup
        if: always()
        run: docker rm -f test-container || true

  # Docker Compose validation
  docker-compose-validate:
    name: Docker Compose - Syntax Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Validate docker-compose.yml
        run: docker compose config > /dev/null

      - name: Check required services
        run: |
          services=$(docker compose config --services)
          required="web-ui-backend web-ui-frontend clickhouse grafana n8n caddy"
          for svc in $required; do
            echo "$services" | grep -q "$svc" || (echo "Missing service: $svc" && exit 1)
          done

  # Documentation validation
  docs-check:
    name: Documentation - Link & Format Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Check Markdown files exist
        run: |
          required_docs=(
            "README.md"
            "docs/INSTALLATION.md"
            "docs/USER_GUIDE.md"
            "docs/CONFIGURATION.md"
            "docs/AUTHENTICATION.md"
            "docs/API.md"
            "prompt-guard-api/README.md"
          )
          for doc in "${required_docs[@]}"; do
            if [ ! -f "$doc" ]; then
              echo "Missing required documentation: $doc"
              exit 1
            fi
          done

      - name: Check for TODO/FIXME in code
        run: |
          if grep -r "TODO\|FIXME" services/ prompt-guard-api/ --include="*.ts" --include="*.tsx" --include="*.py" | grep -v node_modules; then
            echo "Warning: Found TODO/FIXME comments"
          fi

  # Security audit
  security-audit:
    name: Security - Dependency Audit
    runs-on: ubuntu-latest

    strategy:
      matrix:
        component:
          - backend
          - frontend

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ matrix.component }}-${{ hashFiles(format('services/web-ui/{0}/package-lock.json', matrix.component)) }}
          restore-keys: |
            ${{ runner.os }}-npm-${{ matrix.component }}-
            ${{ runner.os }}-npm-

      - name: Security audit - ${{ matrix.component }}
        working-directory: services/web-ui/${{ matrix.component }}
        run: |
          npm ci
          if [ "${{ matrix.component }}" = "frontend" ]; then
            npm rebuild rollup
          fi
          npm audit --audit-level=moderate
        continue-on-error: true

  # Secret scanning
  secret-scan:
    name: Security - Secret Scanning
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for secrets in code
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
        continue-on-error: true

  # Installation script validation
  install-script-check:
    name: Installation Script - Validation
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Check script syntax
        run: bash -n install.sh

      - name: Check download script syntax
        run: bash -n scripts/download-llama-model.sh

      - name: Verify script permissions
        run: |
          [ -x install.sh ] || (echo "install.sh not executable" && exit 1)
          [ -x scripts/download-llama-model.sh ] || (echo "download-llama-model.sh not executable" && exit 1)

  # All checks passed
  all-checks:
    name: ✅ All Checks Passed
    runs-on: ubuntu-latest
    needs:
      - backend-build
      - frontend-build
      - prompt-guard-api
      - docker-build
      - docker-compose-validate
      - docs-check
      - security-audit
      - secret-scan
      - install-script-check

    steps:
      - name: Success
        run: |
          echo "=================================="
          echo "✅ All CI checks passed successfully!"
          echo "=================================="
          echo ""
          echo "Build summary:"
          echo "  ✓ Backend TypeScript compiled"
          echo "  ✓ Frontend TypeScript compiled"
          echo "  ✓ Prompt Guard API validated"
          echo "  ✓ Docker images built"
          echo "  ✓ Docker Compose validated"
          echo "  ✓ Documentation checked"
          echo "  ✓ Security audit completed"
          echo "  ✓ Installation scripts validated"
          echo ""
